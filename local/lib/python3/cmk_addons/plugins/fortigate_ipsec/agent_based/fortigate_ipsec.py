#!/usr/bin/env python3"""Agent-based plugin for FortiGate IPsec tunnel monitoring."""from typing import Dict, Iterable, Listfrom .agent_based_api.v1 import Result, Service, State, registerSection = List[Dict[str, str]]def parse_fortigate_ipsec(string_table: List[List[str]]) -> Section:    section: Section = []    for row in string_table:        if not row:            continue        first_cell = row[0]        if first_cell.startswith("ERROR"):            message = first_cell.partition(" ")[2] or first_cell            return [{"error": message}]        parts = first_cell.split(";")        if len(parts) < 6:            continue        name, status, local_gw, remote_gw, rx_bytes, tx_bytes = parts[:6]        section.append(            {                "name": name,                "status": status,                "local_gw": local_gw,                "remote_gw": remote_gw,                "rx_bytes": rx_bytes,                "tx_bytes": tx_bytes,            }        )    return sectiondef discover_fortigate_ipsec(section: Section) -> Iterable[Service]:    if section and section[0].get("error"):        return    for tunnel in section:        name = tunnel.get("name")        if name:            yield Service(item=name)def check_fortigate_ipsec(item: str, section: Section) -> Iterable[Result]:    if section and section[0].get("error"):        message = section[0]["error"]        yield Result(state=State.CRIT, summary=f"Tunnel data unavailable: {message}")        return    for tunnel in section:        if tunnel.get("name") == item:            status = (tunnel.get("status") or "").lower()            is_up = status == "up"            state = State.OK if is_up else State.CRIT            human_status = "up" if is_up else "down"            yield Result(state=state, summary=f"Tunnel {item} is {human_status}")            notice_parts = [                f"Local GW: {tunnel.get('local_gw') or '-'}",                f"Remote GW: {tunnel.get('remote_gw') or '-'}",                f"RX: {tunnel.get('rx_bytes') or '0'} B",                f"TX: {tunnel.get('tx_bytes') or '0'} B",            ]            yield Result(state=State.OK, notice=", ".join(notice_parts))            returnregister.agent_section(    name="fortigate_ipsec",    parse_function=parse_fortigate_ipsec,)register.check_plugin(    name="fortigate_ipsec",    service_name="FortiGate IPsec %s",    discovery_function=discover_fortigate_ipsec,    check_function=check_fortigate_ipsec,)